<?php
/**
 * Created by PhpStorm.
 * User: POE10
 * Date: 02/05/2019
 * Time: 17:28
 */
namespace Drupal\hello\Form;


use Drupal\Core\Database\TransactionNameNonUniqueException;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

class CalculatorForm extends FormBase
{
    public function getFormId()
    {
        // TODO: Implement getFormId() method.

        return 'hello_form';
    }

    public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
    {
        // TODO: Implement buildForm() method.

        $form['firstvalue'] = array(
            '#type' => 'textfield',
            '#title' => 'Fist value',
            '#required' => 'true',
            '#placeholder' => 'Entrez votre valeur',
            '#description' => 'Enter first value'
        );

        $form['operation'] = array(
            '#type' => 'radios',
            '#options' => array(
                'addition' => 'Ajouter',
                'soustraction' => 'Soustract',
                'multiplication' => 'Multiply',
                'division' => 'Divide'
            ),
            '#title' => 'Operation',
            '#description' => 'Choose operation for processing'

        );

        $form['secondvalue'] = array(
            '#type' => 'textfield',
            '#title' => 'Second value',
            '#required' => 'true',
            '#placeholder' => 'Entrez votre valeur',
            '#description' => 'Enter second value'
        );

        $form['submit'] = array(
            '#type' => 'submit',
            '#value' => $this->t('Calculate')
        );

            $result = $form_state->getRebuildInfo();
//            ksm($result);
            if (isset($result['result'])) {
                $form['result'] = array(
                    '#type' => 'html_tag',
                    '#tag' => 'h2',
                    '#value' => 'Result: '.$result['result']
                );
            }


        return $form;
    }

    public function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state)
    {
        // TODO: Implement submitForm() method.
        $firstvalue = $form_state->getValue('firstvalue');
        $secondvalue = $form_state->getValue('secondvalue');
        $operation = $form_state->getValue('operation');

//        $result = 0;
        ksm($secondvalue);

       if($operation == 'addition'){
           $result = $firstvalue + $secondvalue;
       }elseif ($operation == 'soustraction'){
           $result = $firstvalue - $secondvalue;
       }elseif ($operation == 'multiplication'){
           $result = $firstvalue * $secondvalue;
       }else{
           $result = $firstvalue / $secondvalue;
       }
       $form_state->addRebuildInfo('result', $result);
        $form_state->setRebuild();
//        ksm($form_state);

//        \Drupal::service('messenger')->addMessage($result);

    }

    public function validateForm(array &$form, FormStateInterface $form_state)
    {
        // TODO: Change the autogenerated stub
        $firstvalue = $form_state->getValue('firstvalue');
        $secondvalue = $form_state->getValue('secondvalue');
        $operation = $form_state->getValue('operation');

        if (!is_numeric($firstvalue)){
            $form_state->setErrorByName('firstvalue', $this->t('Firstvalue must be numeric'));
            }
        if(!is_numeric($secondvalue)) {
            $form_state->setErrorByName('secondvalue', $this->t('Secondvalue must be numeric'));
        }

        if ($operation == 'division' && $secondvalue == 0){
            $form_state->setErrorByName('secondvalue', $this->t('Secondvalue must be different to 0'));
        }
        if (isset($form['result'])){
            unset($form['result']);
        }
    }
}
